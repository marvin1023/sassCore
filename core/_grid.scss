@charset "UTF-8";
//-----------------------------------------------------  
// grid scss
// 网格系统，根据blankwork的思想，进行扩展，既支持固定
// 宽度也支持百分比宽度，还可以控制是否输出span的class
//----------------------------------------------------- 

// thanks:
// http://www.blankwork.net/
// http://semantic.gs/
// http://heygrady.com/blog/2011/02/17/using-sass-with-the-1kb-grid-system/   
// https://github.com/thoughtbot/bourbon/blob/master/app/assets/stylesheets/functions/_flex-grid.scss
// http://bjorkoy.com/2010/05/css-grids-with-sass/

// variables
// 这里设计的是100px的布局，(65+20)*12-20 = 1000
// 将gridColumn设置为60px，就是盛名的960网格系统
//----------------------------------------------------- 
$gridColumns:                     12 !default;      // Total number of columns
$gridColumn:                      65px !default;   // Width of a single column
$gridGutter:                      20px !default;     // Width of the gutter
$gridSystem:                      $gridColumns * ($gridColumn + $gridGutter); //grid system width


// percent layout setting
// 百分比布局的变量设置
//----------------------------------------------------- 
// Set $gridPercentSwitch true for a fluid layout
$gridPercentSwitch:               false !default;
$gridReal:                        $gridSystem !default;
$gridGutterPercent:               percentage($gridGutter / $gridSystem) !default;

@if $gridPercentSwitch{
  $gridReal:                      100%;
}

// ie6/7 fluid layout bug: http://tylertate.com/blog/2012/01/05/subpixel-rounding.html
// ie6/7  getWidth($i, true, $correction)
$gridMin:                         960 !default;
$gridCorrection:                  0.5 / $gridMin * 100 * 1%;


// margin value
//----------------------------------------------------- 
// if fluid layout the value is $gridGutterPercent
// if fixed layout the value is $gridGutter
$gridMargin:                      if($gridPercentSwitch, $gridGutterPercent, $gridGutter) !default;


// true for grid class(.span1, .span2...)
// ----------------------------------------
$gridSpanSwitch:                  false !default;


// A Function to calculate width:
// 这个函数几乎是blankwork的灵魂，用来计算宽度的
// Example usage: (based on default values)
// getWidth(3, false) would return 240px
// getWidth(3) or getWidth(3, true) would return 220px;
// and plain getWidth() or getWidth would return 940px;
@function getWidth($i:$gridColumns, $onlyInnerWidth:true, $subtract:0){
  // First set a default return value
  $return: (($gridColumn + $gridGutter) * $i / $gridSystem) * $gridReal - $subtract !default;

  // If we want to get only the inner width (without gutter)
  @if $onlyInnerWidth == true {
    // Return the total calculated width, without the margins
    // If the second parameter of this function is not specified
    // This is what is going to be returned
    $return: ((($gridColumn + $gridGutter) * $i - $gridGutter) / $gridSystem) * $gridReal - $subtract;
  }

  @return $return;
}


// A Function to calculate percent width:
// Example usage:getPercent(3,6)
@function getPercent($i, $containerColumns:$gridColumns,$onlyInnerWidth:true, $subtract:0) {
  $percentage: percentage($i / $containerColumns);
  
  @if $onlyInnerWidth == true {
    $width: $i * $gridColumn + ($i - 1) * $gridGutter;
    $container-width: $containerColumns * $gridColumn + ($containerColumns - 1) * $gridGutter;
    $percentage: percentage($width / $container-width);
  }
  
  @return $percentage - $subtract;
}


// span or column's gutter
%margin-left-right{
  margin-left: ($gridMargin / 2); 
  margin-right: ($gridMargin / 2);

  @if $gridPercentSwitch and $lte7{
    *margin-left: ($gridMargin / 2) - $gridCorrection; 
    *margin-right: ($gridMargin / 2) - $gridCorrection;
  }
}

// Column Mixin:
// We're defining the default values as follows:
// Default Column Count: Max Column Count
// Padding (explained below): 0
@mixin column($i: $gridColumns, $subtract:0){
  @extend %float-left;
  @extend %margin-left-right;

  $getWidth: getWidth($i, true, $subtract); // Use the width calculation function to get the width 
  width: $getWidth;

  @if $gridPercentSwitch and $lte7{
    *width:$getWidth - $gridCorrection;
  } 
}

// wrapper
// This typically is a main content wrapper, 
// But just in case someone finds an alternative use of this, 
// we shouldhave the flexibility
// So wrapper( column count, center ?, subtract)
@mixin wrapper($i: $gridColumns, $center:true, $subtract:0){
  @extend %clearfix;
  
  // Because this is a wrapper, we don't need the outer gutter - we need the full width
  $getWrapperWidth: getWidth($i, false);
  // In case there is a need to subtract the wrapper
  $wrapperWidth: $getWrapperWidth - $subtract;
  width:$wrapperWidth;

  // If we want the wrapper to be centered (by default we do)
  @if $center == true {
    margin-left:auto;
    margin-right:auto;
  }
}


// alpha & omega
//----------------------------------------------------- 
@mixin alpha{
  margin-left:0;
}
@mixin omega{
  margin-right:0;
}


// prepend & append
//----------------------------------------------------- 
@mixin prepend($i:1, $subtract:0){ 
  margin-left: getWidth($i,false,$subtract);
} 
@mixin append($i:1, $subtract:0){ 
  margin-right: getWidth($i,false,$subtract);
}


// class span1-$gridColumns
// span的class循环输出，通过变量$gridSpanSwitch来控制是否输出
//-----------------------------------------------------  
@if $gridSpanSwitch {
  @for $i from 1 through $gridColumns {
    .span#{$i} { 
      @extend %float-left;
      @extend %margin-left-right;
      
      width:getWidth($i);
      
      @if $gridPercentSwitch and $lte7{
        *width:getWidth($i) - $gridCorrection;
      } 
    }
  } 
}
